// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package params

import "time"

// BoolValueList is a list of bool that can receive a list of values
type BoolValueList []bool

// Set sets the list of strings onto the string
func (list *BoolValueList) Set(strings []string) error {
	for _, s := range strings {
		iv := new(BoolValue)
		err := iv.Set(s)
		if err != nil {
			return err
		}
		*list = append(*list, bool(*iv))
	}
	return nil
}

func (ps *paramSet) Bool(name string, optional bool) *bool {
	var tmp bool
	sv := NewBoolValue(tmp, &tmp)
	Var(sv, name, optional)
	return &tmp
}

// Bool creates a parameter of type bool.
func Bool(name string, optional bool) *bool {
	return defaultParamSet.Bool(name, optional)
}

func (ps *paramSet) BoolList(name string, optional bool) *[]bool {
	minLength := 0
	if !optional {
		minLength = 1
	}
	return BoolListCustom(name, minLength, -1)
}

// BoolList creates a parameter of type bool that captures all the remaining arguments.
func BoolList(name string, optional bool) *[]bool {
	return defaultParamSet.BoolList(name, optional)
}

func (ps *paramSet) BoolListCustom(name string, minLength int, maxLength int) *[]bool {
	list := new(BoolValueList)
	VarListCustom(list, name, minLength, maxLength)
	return (*[]bool)(list)
}

// BoolListCustom creates a parameter of type bool that captures a list of the specified min and
// max length from the remaining arguments
func BoolListCustom(name string, minLength int, maxLength int) *[]bool {
	return defaultParamSet.BoolListCustom(name, minLength, maxLength)
}

// StringValueList is a list of string that can receive a list of values
type StringValueList []string

// Set sets the list of strings onto the string
func (list *StringValueList) Set(strings []string) error {
	for _, s := range strings {
		iv := new(StringValue)
		err := iv.Set(s)
		if err != nil {
			return err
		}
		*list = append(*list, string(*iv))
	}
	return nil
}

func (ps *paramSet) String(name string, optional bool) *string {
	var tmp string
	sv := NewStringValue(tmp, &tmp)
	Var(sv, name, optional)
	return &tmp
}

// String creates a parameter of type string.
func String(name string, optional bool) *string {
	return defaultParamSet.String(name, optional)
}

func (ps *paramSet) StringList(name string, optional bool) *[]string {
	minLength := 0
	if !optional {
		minLength = 1
	}
	return StringListCustom(name, minLength, -1)
}

// StringList creates a parameter of type string that captures all the remaining arguments.
func StringList(name string, optional bool) *[]string {
	return defaultParamSet.StringList(name, optional)
}

func (ps *paramSet) StringListCustom(name string, minLength int, maxLength int) *[]string {
	list := new(StringValueList)
	VarListCustom(list, name, minLength, maxLength)
	return (*[]string)(list)
}

// StringListCustom creates a parameter of type string that captures a list of the specified min and
// max length from the remaining arguments
func StringListCustom(name string, minLength int, maxLength int) *[]string {
	return defaultParamSet.StringListCustom(name, minLength, maxLength)
}

// IntValueList is a list of int that can receive a list of values
type IntValueList []int

// Set sets the list of strings onto the string
func (list *IntValueList) Set(strings []string) error {
	for _, s := range strings {
		iv := new(IntValue)
		err := iv.Set(s)
		if err != nil {
			return err
		}
		*list = append(*list, int(*iv))
	}
	return nil
}

func (ps *paramSet) Int(name string, optional bool) *int {
	var tmp int
	sv := NewIntValue(tmp, &tmp)
	Var(sv, name, optional)
	return &tmp
}

// Int creates a parameter of type int.
func Int(name string, optional bool) *int {
	return defaultParamSet.Int(name, optional)
}

func (ps *paramSet) IntList(name string, optional bool) *[]int {
	minLength := 0
	if !optional {
		minLength = 1
	}
	return IntListCustom(name, minLength, -1)
}

// IntList creates a parameter of type int that captures all the remaining arguments.
func IntList(name string, optional bool) *[]int {
	return defaultParamSet.IntList(name, optional)
}

func (ps *paramSet) IntListCustom(name string, minLength int, maxLength int) *[]int {
	list := new(IntValueList)
	VarListCustom(list, name, minLength, maxLength)
	return (*[]int)(list)
}

// IntListCustom creates a parameter of type int that captures a list of the specified min and
// max length from the remaining arguments
func IntListCustom(name string, minLength int, maxLength int) *[]int {
	return defaultParamSet.IntListCustom(name, minLength, maxLength)
}

// Int64ValueList is a list of int64 that can receive a list of values
type Int64ValueList []int64

// Set sets the list of strings onto the string
func (list *Int64ValueList) Set(strings []string) error {
	for _, s := range strings {
		iv := new(Int64Value)
		err := iv.Set(s)
		if err != nil {
			return err
		}
		*list = append(*list, int64(*iv))
	}
	return nil
}

func (ps *paramSet) Int64(name string, optional bool) *int64 {
	var tmp int64
	sv := NewInt64Value(tmp, &tmp)
	Var(sv, name, optional)
	return &tmp
}

// Int64 creates a parameter of type int64.
func Int64(name string, optional bool) *int64 {
	return defaultParamSet.Int64(name, optional)
}

func (ps *paramSet) Int64List(name string, optional bool) *[]int64 {
	minLength := 0
	if !optional {
		minLength = 1
	}
	return Int64ListCustom(name, minLength, -1)
}

// Int64List creates a parameter of type int64 that captures all the remaining arguments.
func Int64List(name string, optional bool) *[]int64 {
	return defaultParamSet.Int64List(name, optional)
}

func (ps *paramSet) Int64ListCustom(name string, minLength int, maxLength int) *[]int64 {
	list := new(Int64ValueList)
	VarListCustom(list, name, minLength, maxLength)
	return (*[]int64)(list)
}

// Int64ListCustom creates a parameter of type int64 that captures a list of the specified min and
// max length from the remaining arguments
func Int64ListCustom(name string, minLength int, maxLength int) *[]int64 {
	return defaultParamSet.Int64ListCustom(name, minLength, maxLength)
}

// UintValueList is a list of uint that can receive a list of values
type UintValueList []uint

// Set sets the list of strings onto the string
func (list *UintValueList) Set(strings []string) error {
	for _, s := range strings {
		iv := new(UintValue)
		err := iv.Set(s)
		if err != nil {
			return err
		}
		*list = append(*list, uint(*iv))
	}
	return nil
}

func (ps *paramSet) Uint(name string, optional bool) *uint {
	var tmp uint
	sv := NewUintValue(tmp, &tmp)
	Var(sv, name, optional)
	return &tmp
}

// Uint creates a parameter of type uint.
func Uint(name string, optional bool) *uint {
	return defaultParamSet.Uint(name, optional)
}

func (ps *paramSet) UintList(name string, optional bool) *[]uint {
	minLength := 0
	if !optional {
		minLength = 1
	}
	return UintListCustom(name, minLength, -1)
}

// UintList creates a parameter of type uint that captures all the remaining arguments.
func UintList(name string, optional bool) *[]uint {
	return defaultParamSet.UintList(name, optional)
}

func (ps *paramSet) UintListCustom(name string, minLength int, maxLength int) *[]uint {
	list := new(UintValueList)
	VarListCustom(list, name, minLength, maxLength)
	return (*[]uint)(list)
}

// UintListCustom creates a parameter of type uint that captures a list of the specified min and
// max length from the remaining arguments
func UintListCustom(name string, minLength int, maxLength int) *[]uint {
	return defaultParamSet.UintListCustom(name, minLength, maxLength)
}

// Uint64ValueList is a list of uint64 that can receive a list of values
type Uint64ValueList []uint64

// Set sets the list of strings onto the string
func (list *Uint64ValueList) Set(strings []string) error {
	for _, s := range strings {
		iv := new(Uint64Value)
		err := iv.Set(s)
		if err != nil {
			return err
		}
		*list = append(*list, uint64(*iv))
	}
	return nil
}

func (ps *paramSet) Uint64(name string, optional bool) *uint64 {
	var tmp uint64
	sv := NewUint64Value(tmp, &tmp)
	Var(sv, name, optional)
	return &tmp
}

// Uint64 creates a parameter of type uint64.
func Uint64(name string, optional bool) *uint64 {
	return defaultParamSet.Uint64(name, optional)
}

func (ps *paramSet) Uint64List(name string, optional bool) *[]uint64 {
	minLength := 0
	if !optional {
		minLength = 1
	}
	return Uint64ListCustom(name, minLength, -1)
}

// Uint64List creates a parameter of type uint64 that captures all the remaining arguments.
func Uint64List(name string, optional bool) *[]uint64 {
	return defaultParamSet.Uint64List(name, optional)
}

func (ps *paramSet) Uint64ListCustom(name string, minLength int, maxLength int) *[]uint64 {
	list := new(Uint64ValueList)
	VarListCustom(list, name, minLength, maxLength)
	return (*[]uint64)(list)
}

// Uint64ListCustom creates a parameter of type uint64 that captures a list of the specified min and
// max length from the remaining arguments
func Uint64ListCustom(name string, minLength int, maxLength int) *[]uint64 {
	return defaultParamSet.Uint64ListCustom(name, minLength, maxLength)
}

// Float64ValueList is a list of float64 that can receive a list of values
type Float64ValueList []float64

// Set sets the list of strings onto the string
func (list *Float64ValueList) Set(strings []string) error {
	for _, s := range strings {
		iv := new(Float64Value)
		err := iv.Set(s)
		if err != nil {
			return err
		}
		*list = append(*list, float64(*iv))
	}
	return nil
}

func (ps *paramSet) Float64(name string, optional bool) *float64 {
	var tmp float64
	sv := NewFloat64Value(tmp, &tmp)
	Var(sv, name, optional)
	return &tmp
}

// Float64 creates a parameter of type float64.
func Float64(name string, optional bool) *float64 {
	return defaultParamSet.Float64(name, optional)
}

func (ps *paramSet) Float64List(name string, optional bool) *[]float64 {
	minLength := 0
	if !optional {
		minLength = 1
	}
	return Float64ListCustom(name, minLength, -1)
}

// Float64List creates a parameter of type float64 that captures all the remaining arguments.
func Float64List(name string, optional bool) *[]float64 {
	return defaultParamSet.Float64List(name, optional)
}

func (ps *paramSet) Float64ListCustom(name string, minLength int, maxLength int) *[]float64 {
	list := new(Float64ValueList)
	VarListCustom(list, name, minLength, maxLength)
	return (*[]float64)(list)
}

// Float64ListCustom creates a parameter of type float64 that captures a list of the specified min and
// max length from the remaining arguments
func Float64ListCustom(name string, minLength int, maxLength int) *[]float64 {
	return defaultParamSet.Float64ListCustom(name, minLength, maxLength)
}

// DurationValueList is a list of time.Duration that can receive a list of values
type DurationValueList []time.Duration

// Set sets the list of strings onto the string
func (list *DurationValueList) Set(strings []string) error {
	for _, s := range strings {
		iv := new(DurationValue)
		err := iv.Set(s)
		if err != nil {
			return err
		}
		*list = append(*list, time.Duration(*iv))
	}
	return nil
}

func (ps *paramSet) Duration(name string, optional bool) *time.Duration {
	var tmp time.Duration
	sv := NewDurationValue(tmp, &tmp)
	Var(sv, name, optional)
	return &tmp
}

// Duration creates a parameter of type time.Duration.
func Duration(name string, optional bool) *time.Duration {
	return defaultParamSet.Duration(name, optional)
}

func (ps *paramSet) DurationList(name string, optional bool) *[]time.Duration {
	minLength := 0
	if !optional {
		minLength = 1
	}
	return DurationListCustom(name, minLength, -1)
}

// DurationList creates a parameter of type time.Duration that captures all the remaining arguments.
func DurationList(name string, optional bool) *[]time.Duration {
	return defaultParamSet.DurationList(name, optional)
}

func (ps *paramSet) DurationListCustom(name string, minLength int, maxLength int) *[]time.Duration {
	list := new(DurationValueList)
	VarListCustom(list, name, minLength, maxLength)
	return (*[]time.Duration)(list)
}

// DurationListCustom creates a parameter of type time.Duration that captures a list of the specified min and
// max length from the remaining arguments
func DurationListCustom(name string, minLength int, maxLength int) *[]time.Duration {
	return defaultParamSet.DurationListCustom(name, minLength, maxLength)
}
