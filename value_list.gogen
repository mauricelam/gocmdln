package params

import (
    "time"

    "github.com/mauricelam/genny/generic"
)

type gen generic.Type

// GenValueList is a list of gen that can receive a list of values
type GenValueList []gen

// Set sets the list of strings onto the string
func (list *GenValueList) Set(strings []string) error {
    for _, s := range strings {
        iv := new(GenValue)
        err := iv.Set(s)
        if err != nil { return err }
        *list = append(*list, gen(*iv))
    }
    return nil
}

func (ps *ParamSet) Gen(name string, optional bool, metadata interface{}) *gen {
    var tmp gen
    sv := NewGenValue(tmp, &tmp)
    ps.VarValue(sv, name, optional, metadata)
    return &tmp
}

// Gen creates a parameter of type gen.
func Gen(name string, optional bool, metadata interface{}) *gen {
    return defaultParamSet.Gen(name, optional, metadata)
}

func (ps *ParamSet) GenList(name string, optional bool, metadata interface{}) *[]gen {
    minLength := 0
    if !optional { minLength = 1 }
    return ps.GenListCustom(name, minLength, -1, metadata)
}

// GenList creates a parameter of type gen that captures all the remaining arguments.
func GenList(name string, optional bool, metadata interface{}) *[]gen {
    return defaultParamSet.GenList(name, optional, metadata)
}

func (ps *ParamSet) GenListCustom(name string, minLength int, maxLength int, metadata interface{}) *[]gen {
    list := new(GenValueList)
    ps.VarListCustom(list, name, minLength, maxLength, metadata)
    return (*[]gen)(list)
}

// GenListCustom creates a parameter of type gen that captures a list of the specified min and
// max length from the remaining arguments
func GenListCustom(name string, minLength int, maxLength int, metadata interface{}) *[]gen {
    return defaultParamSet.GenListCustom(name, minLength, maxLength, metadata)
}
